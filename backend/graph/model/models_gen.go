// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Account struct {
	ID          string      `json:"id"`
	Code        string      `json:"code"`
	Name        string      `json:"name"`
	AccountType AccountType `json:"accountType"`
}

type AmountRange struct {
	Min *int `json:"min,omitempty"`
	Max *int `json:"max,omitempty"`
}

type DateRange struct {
	From *time.Time `json:"from,omitempty"`
	To   *time.Time `json:"to,omitempty"`
}

type Journal struct {
	ID            string          `json:"id"`
	JournalNumber string          `json:"journalNumber"`
	Date          time.Time       `json:"date"`
	Description   string          `json:"description"`
	Entries       []*JournalEntry `json:"entries"`
	CreatedAt     time.Time       `json:"createdAt"`
	UpdatedAt     time.Time       `json:"updatedAt"`
}

type JournalConnection struct {
	Items    []*Journal `json:"items"`
	PageInfo *PageInfo  `json:"pageInfo"`
}

type JournalEntry struct {
	ID      string   `json:"id"`
	Account *Account `json:"account"`
	IsDebit bool     `json:"isDebit"`
	Amount  int      `json:"amount"`
}

type JournalFilter struct {
	DateRange      *DateRange   `json:"dateRange,omitempty"`
	AccountCodes   []string     `json:"accountCodes,omitempty"`
	DepartmentCode *string      `json:"departmentCode,omitempty"`
	AmountRange    *AmountRange `json:"amountRange,omitempty"`
}

type PageInfo struct {
	HasNextPage bool `json:"hasNextPage"`
	HasPrevPage bool `json:"hasPrevPage"`
	TotalPages  int  `json:"totalPages"`
	CurrentPage int  `json:"currentPage"`
}

type PaginationInput struct {
	Page    int `json:"page"`
	PerPage int `json:"perPage"`
}

type Query struct {
}

type AccountType string

const (
	AccountTypeAsset     AccountType = "ASSET"
	AccountTypeLiability AccountType = "LIABILITY"
	AccountTypeEquity    AccountType = "EQUITY"
	AccountTypeRevenue   AccountType = "REVENUE"
	AccountTypeExpense   AccountType = "EXPENSE"
)

var AllAccountType = []AccountType{
	AccountTypeAsset,
	AccountTypeLiability,
	AccountTypeEquity,
	AccountTypeRevenue,
	AccountTypeExpense,
}

func (e AccountType) IsValid() bool {
	switch e {
	case AccountTypeAsset, AccountTypeLiability, AccountTypeEquity, AccountTypeRevenue, AccountTypeExpense:
		return true
	}
	return false
}

func (e AccountType) String() string {
	return string(e)
}

func (e *AccountType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccountType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccountType", str)
	}
	return nil
}

func (e AccountType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
